import { z } from "zod";

export const matchScoreBreakdownYearsAlliances = {
	"2015": z.object({
		adjust_points: z.number(),
		auto_points: z.number(),
		container_count_level1: z.number(),
		container_count_level2: z.number(),
		container_count_level3: z.number(),
		container_count_level4: z.number(),
		container_count_level5: z.number(),
		container_count_level6: z.number(),
		container_points: z.number(),
		container_set: z.boolean(),
		foul_count: z.number(),
		foul_points: z.number(),
		litter_count_container: z.number(),
		litter_count_landfill: z.number(),
		litter_count_unprocessed: z.number(),
		litter_points: z.number(),
		robot_set: z.boolean(),
		teleop_points: z.number(),
		total_points: z.number(),
		tote_count_far: z.number(),
		tote_count_near: z.number(),
		tote_points: z.number(),
		tote_set: z.boolean(),
		tote_stack: z.boolean(),
	}).partial(),
	"2016": z.object({
		adjustPoints: z.number(),
		autoBoulderPoints: z.number(),
		autoBouldersHigh: z.number(),
		autoBouldersLow: z.number(),
		autoCrossingPoints: z.number(),
		autoPoints: z.number(),
		autoReachPoints: z.number(),
		breachPoints: z.number(),
		capturePoints: z.number(),
		foulCount: z.number(),
		foulPoints: z.number(),
		position1crossings: z.number(),
		position2: z.string(),
		position2crossings: z.number(),
		position3: z.string(),
		position3crossings: z.number(),
		position4: z.string(),
		position4crossings: z.number(),
		position5: z.string(),
		position5crossings: z.number(),
		robot1Auto: z.enum(["Crossed, Reached, None"]),
		robot2Auto: z.string(),
		robot3Auto: z.string(),
		tba_rpEarned: z.number(),
		techFoulCount: z.number(),
		teleopBoulderPoints: z.number(),
		teleopBouldersHigh: z.number(),
		teleopBouldersLow: z.number(),
		teleopChallengePoints: z.number(),
		teleopCrossingPoints: z.number(),
		teleopDefensesBreached: z.boolean(),
		teleopPoints: z.number(),
		teleopScalePoints: z.number(),
		teleopTowerCaptured: z.boolean(),
		totalPoints: z.number(),
		towerEndStrength: z.number(),
		towerFaceA: z.string(),
		towerFaceB: z.string(),
		towerFaceC: z.string(),
	}).partial(),
	"2017": z.object({
		adjustPoints: z.number(),
		autoFuelHigh: z.number(),
		autoFuelLow: z.number(),
		autoFuelPoints: z.number(),
		autoMobilityPoints: z.number(),
		autoPoints: z.number(),
		autoRotorPoints: z.number(),
		foulCount: z.number(),
		foulPoints: z.number(),
		kPaBonusPoints: z.number(),
		kPaRankingPointAchieved: z.boolean(),
		robot1Auto: z.enum(["Unknown", "Mobility", "None"]),
		robot2Auto: z.enum(["Unknown", "Mobility", "None"]),
		robot3Auto: z.enum(["Unknown", "Mobility", "None"]),
		rotor1Auto: z.boolean(),
		rotor1Engaged: z.boolean(),
		rotor2Auto: z.boolean(),
		rotor2Engaged: z.boolean(),
		rotor3Engaged: z.boolean(),
		rotor4Engaged: z.boolean(),
		rotorBonusPoints: z.number(),
		rotorRankingPointAchieved: z.boolean(),
		tba_rpEarned: z.number(),
		techFoulCount: z.number(),
		teleopFuelHigh: z.number(),
		teleopFuelLow: z.number(),
		teleopFuelPoints: z.number(),
		teleopPoints: z.number(),
		teleopRotorPoints: z.number(),
		teleopTakeoffPoints: z.number(),
		totalPoints: z.number(),
		touchpadFar: z.string(),
		touchpadMiddle: z.string(),
		touchpadNear: z.string(),
	}).partial(),
	"2018": z.object({
		adjustPoints: z.number(),
		autoOwnershipPoints: z.number(),
		autoPoints: z.number(),
		autoQuestRankingPoint: z.boolean(),
		autoRobot1: z.string(),
		autoRobot2: z.string(),
		autoRobot3: z.string(),
		autoRunPoints: z.number(),
		autoScaleOwnershipSec: z.number(),
		autoSwitchAtZero: z.boolean(),
		autoSwitchOwnershipSec: z.number(),
		endgamePoints: z.number(),
		endgameRobot1: z.string(),
		endgameRobot2: z.string(),
		endgameRobot3: z.string(),
		faceTheBossRankingPoint: z.boolean(),
		foulCount: z.number(),
		foulPoints: z.number(),
		rp: z.number(),
		tba_gameData: z.string(),
		techFoulCount: z.number(),
		teleopOwnershipPoints: z.number(),
		teleopPoints: z.number(),
		teleopScaleBoostSec: z.number(),
		teleopScaleForceSec: z.number(),
		teleopScaleOwnershipSec: z.number(),
		teleopSwitchBoostSec: z.number(),
		teleopSwitchForceSec: z.number(),
		teleopSwitchOwnershipSec: z.number(),
		totalPoints: z.number(),
		vaultBoostPlayed: z.number(),
		vaultBoostTotal: z.number(),
		vaultForcePlayed: z.number(),
		vaultForceTotal: z.number(),
		vaultLevitatePlayed: z.number(),
		vaultLevitateTotal: z.number(),
		vaultPoints: z.number(),
	}).partial(),
	"2019": z.object({
		adjustPoints: z.number(),
		autoPoints: z.number(),
		bay1: z.string(),
		bay2: z.string(),
		bay3: z.string(),
		bay4: z.string(),
		bay5: z.string(),
		bay6: z.string(),
		bay7: z.string(),
		bay8: z.string(),
		cargoPoints: z.number(),
		completeRocketRankingPoint: z.boolean(),
		completedRocketFar: z.boolean(),
		completedRocketNear: z.boolean(),
		endgameRobot1: z.string(),
		endgameRobot2: z.string(),
		endgameRobot3: z.string(),
		foulCount: z.number(),
		foulPoints: z.number(),
		habClimbPoints: z.number(),
		habDockingRankingPoint: z.boolean(),
		habLineRobot1: z.string(),
		habLineRobot2: z.string(),
		habLineRobot3: z.string(),
		hatchPanelPoints: z.number(),
		lowLeftRocketFar: z.string(),
		lowLeftRocketNear: z.string(),
		lowRightRocketFar: z.string(),
		lowRightRocketNear: z.string(),
		midLeftRocketFar: z.string(),
		midLeftRocketNear: z.string(),
		midRightRocketFar: z.string(),
		midRightRocketNear: z.string(),
		preMatchBay1: z.string(),
		preMatchBay2: z.string(),
		preMatchBay3: z.string(),
		preMatchBay6: z.string(),
		preMatchBay7: z.string(),
		preMatchBay8: z.string(),
		preMatchLevelRobot1: z.string(),
		preMatchLevelRobot2: z.string(),
		preMatchLevelRobot3: z.string(),
		rp: z.number(),
		sandStormBonusPoints: z.number(),
		techFoulCount: z.number(),
		teleopPoints: z.number(),
		topLeftRocketFar: z.string(),
		topLeftRocketNear: z.string(),
		topRightRocketFar: z.string(),
		topRightRocketNear: z.string(),
		totalPoints: z.number(),
	}).partial(),
	"2020": z.object({
		adjustPoints: z.number(),
		autoCellPoints: z.number(),
		autoCellsBottom: z.number(),
		autoCellsInner: z.number(),
		autoCellsOuter: z.number(),
		autoInitLinePoints: z.number(),
		autoPoints: z.number(),
		controlPanelPoints: z.number(),
		endgamePoints: z.number(),
		endgameRobot1: z.string(),
		endgameRobot2: z.string(),
		endgameRobot3: z.string(),
		endgameRungIsLevel: z.string(),
		foulCount: z.number(),
		foulPoints: z.number(),
		initLineRobot1: z.string(),
		initLineRobot2: z.string(),
		initLineRobot3: z.string(),
		rp: z.number(),
		shieldEnergizedRankingPoint: z.boolean(),
		shieldOperationalRankingPoint: z.boolean(),
		stage1Activated: z.boolean(),
		stage2Activated: z.boolean(),
		stage3Activated: z.boolean(),
		stage3TargetColor: z.string(),
		tba_numRobotsHanging: z.number(),
		tba_shieldEnergizedRankingPointFromFoul: z.boolean(),
		techFoulCount: z.number(),
		teleopCellPoints: z.number(),
		teleopCellsBottom: z.number(),
		teleopCellsInner: z.number(),
		teleopCellsOuter: z.number(),
		teleopPoints: z.number(),
		totalPoints: z.number(),
	}).partial(),
	"2022": z.object({
		adjustPoints: z.number(),
		autoCargoLowerBlue: z.number(),
		autoCargoLowerFar: z.number(),
		autoCargoLowerNear: z.number(),
		autoCargoLowerRed: z.number(),
		autoCargoPoints: z.number(),
		autoCargoTotal: z.number(),
		autoCargoUpperBlue: z.number(),
		autoCargoUpperFar: z.number(),
		autoCargoUpperNear: z.number(),
		autoCargoUpperRed: z.number(),
		autoPoints: z.number(),
		autoTaxiPoints: z.number(),
		cargoBonusRankingPoint: z.boolean(),
		endgamePoints: z.number(),
		endgameRobot1: z.enum(["Transversal", "High", "Mid", "Low", "None"]),
		endgameRobot2: z.enum(["Transversal", "High", "Mid", "Low", "None"]),
		endgameRobot3: z.enum(["Transversal", "High", "Mid", "Low", "None"]),
		foulCount: z.number(),
		foulPoints: z.number(),
		hangarBonusRankingPoint: z.boolean(),
		matchCargoTotal: z.number(),
		quintetAchieved: z.boolean(),
		rp: z.number(),
		taxiRobot1: z.enum(["Yes", "No"]),
		taxiRobot2: z.enum(["Yes", "No"]),
		taxiRobot3: z.enum(["Yes", "No"]),
		techFoulCount: z.number(),
		teleopCargoLowerBlue: z.number(),
		teleopCargoLowerFar: z.number(),
		teleopCargoLowerNear: z.number(),
		teleopCargoLowerRed: z.number(),
		teleopCargoPoints: z.number(),
		teleopCargoTotal: z.number(),
		teleopCargoUpperBlue: z.number(),
		teleopCargoUpperFar: z.number(),
		teleopCargoUpperNear: z.number(),
		teleopCargoUpperRed: z.number(),
		teleopPoints: z.number(),
		totalPoints: z.number(),
	}).partial(),
	"2023": z.object({
		activationBonusAchieved: z.boolean(),
		adjustPoints: z.number(),
		autoBridgeState: z.enum(["NotLevel", "Level"]),
		autoChargeStationPoints: z.number(),
		autoChargeStationRobot1: z.enum(["None", "Docked"]),
		autoChargeStationRobot2: z.enum(["None", "Docked"]),
		autoChargeStationRobot3: z.enum(["None", "Docked"]),
		autoCommunity: z.object({
			B: z.array(z.enum(["None", "Cone", "Cube"])),
			M: z.array(z.enum(["None", "Cone", "Cube"])),
			T: z.array(z.enum(["None", "Cone", "Cube"])),
		}),
		autoDocked: z.boolean(),
		autoGamePieceCount: z.number(),
		autoGamePiecePoints: z.number(),
		autoMobilityPoints: z.number(),
		autoPoints: z.number(),
		coopGamePieceCount: z.number(),
		coopertitionCriteriaMet: z.boolean(),
		endGameBridgeState: z.enum(["NotLevel", "Level"]),
		endGameChargeStationPoints: z.number(),
		endGameChargeStationRobot1: z.enum(["None", "Docked", "Parked"]),
		endGameChargeStationRobot2: z.enum(["None", "Docked", "Parked"]),
		endGameChargeStationRobot3: z.enum(["None", "Docked", "Parked"]),
		endGameParkPoints: z.number(),
		foulCount: z.number(),
		foulPoints: z.number(),
		linkPoints: z.number(),
		links: z.array(z.object({ nodes: z.array(z.number()), row: z.enum(["Bottom", "Mid", "Top"]) })),
		mobilityRobot1: z.enum(["Yes", "No"]),
		mobilityRobot2: z.enum(["Yes", "No"]),
		mobilityRobot3: z.enum(["Yes", "No"]),
		rp: z.number(),
		sustainabilityBonusAchieved: z.boolean(),
		techFoulCount: z.number(),
		teleopCommunity: z.object({
			B: z.array(z.enum(["None", "Cube", "Cone"])),
			M: z.array(z.enum(["None", "Cube", "Cone"])),
			T: z.array(z.enum(["None", "Cube", "Cone"])),
		}),
		teleopGamePieceCount: z.number(),
		teleopGamePiecePoints: z.number(),
		teleopPoints: z.number(),
		totalChargeStationPoints: z.number(),
		totalPoints: z.number(),
	}).partial(),
	"2024": z.object({
		adjustPoints: z.number(),
		autoAmpNoteCount: z.number(),
		autoAmpNotePoints: z.number(),
		autoLeavePoints: z.number(),
		autoLineRobot1: z.string(),
		autoLineRobot2: z.string(),
		autoLineRobot3: z.string(),
		autoPoints: z.number(),
		autoSpeakerNoteCount: z.number(),
		autoSpeakerNotePoints: z.number(),
		autoTotalNotePoints: z.number(),
		coopNotePlayed: z.boolean(),
		coopertitionBonusAchieved: z.boolean(),
		coopertitionCriteriaMet: z.boolean(),
		endGameHarmonyPoints: z.number(),
		endGameNoteInTrapPoints: z.number(),
		endGameOnStagePoints: z.number(),
		endGameParkPoints: z.number(),
		endGameRobot1: z.string(),
		endGameRobot2: z.string(),
		endGameRobot3: z.string(),
		endGameSpotLightBonusPoints: z.number(),
		endGameTotalStagePoints: z.number(),
		ensembleBonusAchieved: z.boolean(),
		ensembleBonusOnStageRobotsThreshold: z.number(),
		ensembleBonusStagePointsThreshold: z.number(),
		foulCount: z.number(),
		foulPoints: z.number(),
		g206Penalty: z.boolean(),
		g408Penalty: z.boolean(),
		g424Penalty: z.boolean(),
		melodyBonusAchieved: z.boolean(),
		melodyBonusThreshold: z.number(),
		melodyBonusThresholdCoop: z.number(),
		melodyBonusThresholdNonCoop: z.number(),
		micCenterStage: z.boolean(),
		micStageLeft: z.boolean(),
		micStageRight: z.boolean(),
		rp: z.number(),
		techFoulCount: z.number(),
		teleopAmpNoteCount: z.number(),
		teleopAmpNotePoints: z.number(),
		teleopPoints: z.number(),
		teleopSpeakerNoteAmplifiedCount: z.number(),
		teleopSpeakerNoteAmplifiedPoints: z.number(),
		teleopSpeakerNoteCount: z.number(),
		teleopSpeakerNotePoints: z.number(),
		teleopTotalNotePoints: z.number(),
		totalPoints: z.number(),
		trapCenterStage: z.boolean(),
		trapStageLeft: z.boolean(),
		trapStageRight: z.boolean(),
	}).partial(),
	"2025": z.object({
		adjustPoints: z.number(),
		algaePoints: z.number(),
		autoBonusAchieved: z.boolean(),
		autoCoralCount: z.number(),
		autoCoralPoints: z.number(),
		autoLineRobot1: z.enum(["No", "Yes"]),
		autoLineRobot2: z.enum(["No", "Yes"]),
		autoLineRobot3: z.enum(["No", "Yes"]),
		autoMobilityPoints: z.number(),
		autoPoints: z.number(),
		autoReef: z.object({
			botRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			midRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			tba_botRowCount: z.number(),
			tba_midRowCount: z.number(),
			tba_topRowCount: z.number(),
			topRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			trough: z.number(),
		}),
		bargeBonusAchieved: z.boolean(),
		coopertitionCriteriaMet: z.boolean(),
		coralBonusAchieved: z.boolean(),
		endGameBargePoints: z.number(),
		endGameRobot1: z.enum(["None", "Parked", "ShallowCage", "DeepCage"]),
		endGameRobot2: z.enum(["None", "Parked", "ShallowCage", "DeepCage"]),
		endGameRobot3: z.enum(["None", "Parked", "ShallowCage", "DeepCage"]),
		foulCount: z.number(),
		foulPoints: z.number(),
		g206Penalty: z.boolean(),
		g410Penalty: z.boolean(),
		g418Penalty: z.boolean(),
		g428Penalty: z.boolean(),
		netAlgaeCount: z.number(),
		rp: z.number(),
		techFoulCount: z.number(),
		teleopCoralCount: z.number(),
		teleopCoralPoints: z.number(),
		teleopPoints: z.number(),
		teleopReef: z.object({
			botRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			midRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			tba_botRowCount: z.number(),
			tba_midRowCount: z.number(),
			tba_topRowCount: z.number(),
			topRow: z.object({
				nodeA: z.boolean(),
				nodeB: z.boolean(),
				nodeC: z.boolean(),
				nodeD: z.boolean(),
				nodeE: z.boolean(),
				nodeF: z.boolean(),
				nodeG: z.boolean(),
				nodeH: z.boolean(),
				nodeI: z.boolean(),
				nodeJ: z.boolean(),
				nodeK: z.boolean(),
				nodeL: z.boolean(),
			}),
			trough: z.number(),
		}),
		totalPoints: z.number(),
		wallAlgaeCount: z.number(),
	}).partial(),
} satisfies { [key: string]: z.Schema };

export const matchScoreBreakdownYearsMatches = {
	"2015": z.object({
		red: matchScoreBreakdownYearsAlliances["2015"],
		blue: matchScoreBreakdownYearsAlliances["2015"],
		coopertition: z.enum(["None", "Unknown", "Stack"]),
		coopertition_points: z.number(),
	}),
	"2016": z.object({
		red: matchScoreBreakdownYearsAlliances["2016"],
		blue: matchScoreBreakdownYearsAlliances["2016"],
	}),
	"2017": z.object({
		red: matchScoreBreakdownYearsAlliances["2017"],
		blue: matchScoreBreakdownYearsAlliances["2017"],
	}),
	"2018": z.object({
		red: matchScoreBreakdownYearsAlliances["2018"],
		blue: matchScoreBreakdownYearsAlliances["2018"],
	}),
	"2019": z.object({
		red: matchScoreBreakdownYearsAlliances["2019"],
		blue: matchScoreBreakdownYearsAlliances["2019"],
	}),
	"2020": z.object({
		red: matchScoreBreakdownYearsAlliances["2020"],
		blue: matchScoreBreakdownYearsAlliances["2020"],
	}),
	"2022": z.object({
		red: matchScoreBreakdownYearsAlliances["2022"],
		blue: matchScoreBreakdownYearsAlliances["2022"],
	}),
	"2023": z.object({
		red: matchScoreBreakdownYearsAlliances["2023"],
		blue: matchScoreBreakdownYearsAlliances["2023"],
	}),
	"2024": z.object({
		red: matchScoreBreakdownYearsAlliances["2024"],
		blue: matchScoreBreakdownYearsAlliances["2024"],
	}),
	"2025": z.object({
		red: matchScoreBreakdownYearsAlliances["2025"],
		blue: matchScoreBreakdownYearsAlliances["2025"],
	}),
} satisfies { [key: string]: z.Schema };

type Tuple<
	T,
	N extends number,
	R extends readonly T[] = [],
> = R["length"] extends N ? R : Tuple<T, N, readonly [T, ...R]>;
type Values<T> = T extends { [key: string]: infer R } ? R : never;

const p = Object.values(matchScoreBreakdownYearsAlliances) as unknown as Tuple<Values<typeof matchScoreBreakdownYearsMatches>, 10>;

export const Match_alliance = z.object({
	score: z.number().transform(num => num !== -1 ? num : null).nullable(),
	team_keys: z.array(z.string()),
	surrogate_team_keys: z.array(z.string()),
	dq_team_keys: z.array(z.string()),
});

export const Match_Simple = z.object({
	key: z.string(),
	comp_level: z.enum(["qm", "ef", "qf", "sf", "f"]),
	set_number: z.number(),
	match_number: z.number(),
	alliances: z.object({ red: Match_alliance, blue: Match_alliance }),
	winning_alliance: z.enum(["red", "blue", ""]),
	event_key: z.string(),
	time: z.number().nullable(),
	actual_time: z.number().nullable(),
	predicted_time: z.number().nullable(),
});

export const Match = z.object({
	score_breakdown: z.union(p).nullable(),
	videos: z.array(z.object({ type: z.string(), key: z.string() })),
}).merge(Match_Simple);